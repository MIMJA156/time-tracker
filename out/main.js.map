{
  "version": 3,
  "sources": ["../node_modules/is-docker/index.js", "../node_modules/is-wsl/index.js", "../node_modules/define-lazy-prop/index.js", "../node_modules/open/index.js", "../src/server.js", "../src/extension.js"],
  "sourcesContent": ["'use strict';\nconst fs = require('fs');\n\nlet isDocker;\n\nfunction hasDockerEnv() {\n\ttry {\n\t\tfs.statSync('/.dockerenv');\n\t\treturn true;\n\t} catch (_) {\n\t\treturn false;\n\t}\n}\n\nfunction hasDockerCGroup() {\n\ttry {\n\t\treturn fs.readFileSync('/proc/self/cgroup', 'utf8').includes('docker');\n\t} catch (_) {\n\t\treturn false;\n\t}\n}\n\nmodule.exports = () => {\n\tif (isDocker === undefined) {\n\t\tisDocker = hasDockerEnv() || hasDockerCGroup();\n\t}\n\n\treturn isDocker;\n};\n", "'use strict';\nconst os = require('os');\nconst fs = require('fs');\nconst isDocker = require('is-docker');\n\nconst isWsl = () => {\n\tif (process.platform !== 'linux') {\n\t\treturn false;\n\t}\n\n\tif (os.release().toLowerCase().includes('microsoft')) {\n\t\tif (isDocker()) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\ttry {\n\t\treturn fs.readFileSync('/proc/version', 'utf8').toLowerCase().includes('microsoft') ?\n\t\t\t!isDocker() : false;\n\t} catch (_) {\n\t\treturn false;\n\t}\n};\n\nif (process.env.__IS_WSL_TEST__) {\n\tmodule.exports = isWsl;\n} else {\n\tmodule.exports = isWsl();\n}\n", "'use strict';\nmodule.exports = (object, propertyName, fn) => {\n\tconst define = value => Object.defineProperty(object, propertyName, {value, enumerable: true, writable: true});\n\n\tObject.defineProperty(object, propertyName, {\n\t\tconfigurable: true,\n\t\tenumerable: true,\n\t\tget() {\n\t\t\tconst result = fn();\n\t\t\tdefine(result);\n\t\t\treturn result;\n\t\t},\n\t\tset(value) {\n\t\t\tdefine(value);\n\t\t}\n\t});\n\n\treturn object;\n};\n", "const path = require('path');\nconst childProcess = require('child_process');\nconst {promises: fs, constants: fsConstants} = require('fs');\nconst isWsl = require('is-wsl');\nconst isDocker = require('is-docker');\nconst defineLazyProperty = require('define-lazy-prop');\n\n// Path to included `xdg-open`.\nconst localXdgOpenPath = path.join(__dirname, 'xdg-open');\n\nconst {platform, arch} = process;\n\n/**\nGet the mount point for fixed drives in WSL.\n\n@inner\n@returns {string} The mount point.\n*/\nconst getWslDrivesMountPoint = (() => {\n\t// Default value for \"root\" param\n\t// according to https://docs.microsoft.com/en-us/windows/wsl/wsl-config\n\tconst defaultMountPoint = '/mnt/';\n\n\tlet mountPoint;\n\n\treturn async function () {\n\t\tif (mountPoint) {\n\t\t\t// Return memoized mount point value\n\t\t\treturn mountPoint;\n\t\t}\n\n\t\tconst configFilePath = '/etc/wsl.conf';\n\n\t\tlet isConfigFileExists = false;\n\t\ttry {\n\t\t\tawait fs.access(configFilePath, fsConstants.F_OK);\n\t\t\tisConfigFileExists = true;\n\t\t} catch {}\n\n\t\tif (!isConfigFileExists) {\n\t\t\treturn defaultMountPoint;\n\t\t}\n\n\t\tconst configContent = await fs.readFile(configFilePath, {encoding: 'utf8'});\n\t\tconst configMountPoint = /(?<!#.*)root\\s*=\\s*(?<mountPoint>.*)/g.exec(configContent);\n\n\t\tif (!configMountPoint) {\n\t\t\treturn defaultMountPoint;\n\t\t}\n\n\t\tmountPoint = configMountPoint.groups.mountPoint.trim();\n\t\tmountPoint = mountPoint.endsWith('/') ? mountPoint : `${mountPoint}/`;\n\n\t\treturn mountPoint;\n\t};\n})();\n\nconst pTryEach = async (array, mapper) => {\n\tlet latestError;\n\n\tfor (const item of array) {\n\t\ttry {\n\t\t\treturn await mapper(item); // eslint-disable-line no-await-in-loop\n\t\t} catch (error) {\n\t\t\tlatestError = error;\n\t\t}\n\t}\n\n\tthrow latestError;\n};\n\nconst baseOpen = async options => {\n\toptions = {\n\t\twait: false,\n\t\tbackground: false,\n\t\tnewInstance: false,\n\t\tallowNonzeroExitCode: false,\n\t\t...options\n\t};\n\n\tif (Array.isArray(options.app)) {\n\t\treturn pTryEach(options.app, singleApp => baseOpen({\n\t\t\t...options,\n\t\t\tapp: singleApp\n\t\t}));\n\t}\n\n\tlet {name: app, arguments: appArguments = []} = options.app || {};\n\tappArguments = [...appArguments];\n\n\tif (Array.isArray(app)) {\n\t\treturn pTryEach(app, appName => baseOpen({\n\t\t\t...options,\n\t\t\tapp: {\n\t\t\t\tname: appName,\n\t\t\t\targuments: appArguments\n\t\t\t}\n\t\t}));\n\t}\n\n\tlet command;\n\tconst cliArguments = [];\n\tconst childProcessOptions = {};\n\n\tif (platform === 'darwin') {\n\t\tcommand = 'open';\n\n\t\tif (options.wait) {\n\t\t\tcliArguments.push('--wait-apps');\n\t\t}\n\n\t\tif (options.background) {\n\t\t\tcliArguments.push('--background');\n\t\t}\n\n\t\tif (options.newInstance) {\n\t\t\tcliArguments.push('--new');\n\t\t}\n\n\t\tif (app) {\n\t\t\tcliArguments.push('-a', app);\n\t\t}\n\t} else if (platform === 'win32' || (isWsl && !isDocker())) {\n\t\tconst mountPoint = await getWslDrivesMountPoint();\n\n\t\tcommand = isWsl ?\n\t\t\t`${mountPoint}c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe` :\n\t\t\t`${process.env.SYSTEMROOT}\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell`;\n\n\t\tcliArguments.push(\n\t\t\t'-NoProfile',\n\t\t\t'-NonInteractive',\n\t\t\t'\u2013ExecutionPolicy',\n\t\t\t'Bypass',\n\t\t\t'-EncodedCommand'\n\t\t);\n\n\t\tif (!isWsl) {\n\t\t\tchildProcessOptions.windowsVerbatimArguments = true;\n\t\t}\n\n\t\tconst encodedArguments = ['Start'];\n\n\t\tif (options.wait) {\n\t\t\tencodedArguments.push('-Wait');\n\t\t}\n\n\t\tif (app) {\n\t\t\t// Double quote with double quotes to ensure the inner quotes are passed through.\n\t\t\t// Inner quotes are delimited for PowerShell interpretation with backticks.\n\t\t\tencodedArguments.push(`\"\\`\"${app}\\`\"\"`, '-ArgumentList');\n\t\t\tif (options.target) {\n\t\t\t\tappArguments.unshift(options.target);\n\t\t\t}\n\t\t} else if (options.target) {\n\t\t\tencodedArguments.push(`\"${options.target}\"`);\n\t\t}\n\n\t\tif (appArguments.length > 0) {\n\t\t\tappArguments = appArguments.map(arg => `\"\\`\"${arg}\\`\"\"`);\n\t\t\tencodedArguments.push(appArguments.join(','));\n\t\t}\n\n\t\t// Using Base64-encoded command, accepted by PowerShell, to allow special characters.\n\t\toptions.target = Buffer.from(encodedArguments.join(' '), 'utf16le').toString('base64');\n\t} else {\n\t\tif (app) {\n\t\t\tcommand = app;\n\t\t} else {\n\t\t\t// When bundled by Webpack, there's no actual package file path and no local `xdg-open`.\n\t\t\tconst isBundled = !__dirname || __dirname === '/';\n\n\t\t\t// Check if local `xdg-open` exists and is executable.\n\t\t\tlet exeLocalXdgOpen = false;\n\t\t\ttry {\n\t\t\t\tawait fs.access(localXdgOpenPath, fsConstants.X_OK);\n\t\t\t\texeLocalXdgOpen = true;\n\t\t\t} catch {}\n\n\t\t\tconst useSystemXdgOpen = process.versions.electron ||\n\t\t\t\tplatform === 'android' || isBundled || !exeLocalXdgOpen;\n\t\t\tcommand = useSystemXdgOpen ? 'xdg-open' : localXdgOpenPath;\n\t\t}\n\n\t\tif (appArguments.length > 0) {\n\t\t\tcliArguments.push(...appArguments);\n\t\t}\n\n\t\tif (!options.wait) {\n\t\t\t// `xdg-open` will block the process unless stdio is ignored\n\t\t\t// and it's detached from the parent even if it's unref'd.\n\t\t\tchildProcessOptions.stdio = 'ignore';\n\t\t\tchildProcessOptions.detached = true;\n\t\t}\n\t}\n\n\tif (options.target) {\n\t\tcliArguments.push(options.target);\n\t}\n\n\tif (platform === 'darwin' && appArguments.length > 0) {\n\t\tcliArguments.push('--args', ...appArguments);\n\t}\n\n\tconst subprocess = childProcess.spawn(command, cliArguments, childProcessOptions);\n\n\tif (options.wait) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tsubprocess.once('error', reject);\n\n\t\t\tsubprocess.once('close', exitCode => {\n\t\t\t\tif (options.allowNonzeroExitCode && exitCode > 0) {\n\t\t\t\t\treject(new Error(`Exited with code ${exitCode}`));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tresolve(subprocess);\n\t\t\t});\n\t\t});\n\t}\n\n\tsubprocess.unref();\n\n\treturn subprocess;\n};\n\nconst open = (target, options) => {\n\tif (typeof target !== 'string') {\n\t\tthrow new TypeError('Expected a `target`');\n\t}\n\n\treturn baseOpen({\n\t\t...options,\n\t\ttarget\n\t});\n};\n\nconst openApp = (name, options) => {\n\tif (typeof name !== 'string') {\n\t\tthrow new TypeError('Expected a `name`');\n\t}\n\n\tconst {arguments: appArguments = []} = options || {};\n\tif (appArguments !== undefined && appArguments !== null && !Array.isArray(appArguments)) {\n\t\tthrow new TypeError('Expected `appArguments` as Array type');\n\t}\n\n\treturn baseOpen({\n\t\t...options,\n\t\tapp: {\n\t\t\tname,\n\t\t\targuments: appArguments\n\t\t}\n\t});\n};\n\nfunction detectArchBinary(binary) {\n\tif (typeof binary === 'string' || Array.isArray(binary)) {\n\t\treturn binary;\n\t}\n\n\tconst {[arch]: archBinary} = binary;\n\n\tif (!archBinary) {\n\t\tthrow new Error(`${arch} is not supported`);\n\t}\n\n\treturn archBinary;\n}\n\nfunction detectPlatformBinary({[platform]: platformBinary}, {wsl}) {\n\tif (wsl && isWsl) {\n\t\treturn detectArchBinary(wsl);\n\t}\n\n\tif (!platformBinary) {\n\t\tthrow new Error(`${platform} is not supported`);\n\t}\n\n\treturn detectArchBinary(platformBinary);\n}\n\nconst apps = {};\n\ndefineLazyProperty(apps, 'chrome', () => detectPlatformBinary({\n\tdarwin: 'google chrome',\n\twin32: 'chrome',\n\tlinux: ['google-chrome', 'google-chrome-stable', 'chromium']\n}, {\n\twsl: {\n\t\tia32: '/mnt/c/Program Files (x86)/Google/Chrome/Application/chrome.exe',\n\t\tx64: ['/mnt/c/Program Files/Google/Chrome/Application/chrome.exe', '/mnt/c/Program Files (x86)/Google/Chrome/Application/chrome.exe']\n\t}\n}));\n\ndefineLazyProperty(apps, 'firefox', () => detectPlatformBinary({\n\tdarwin: 'firefox',\n\twin32: 'C:\\\\Program Files\\\\Mozilla Firefox\\\\firefox.exe',\n\tlinux: 'firefox'\n}, {\n\twsl: '/mnt/c/Program Files/Mozilla Firefox/firefox.exe'\n}));\n\ndefineLazyProperty(apps, 'edge', () => detectPlatformBinary({\n\tdarwin: 'microsoft edge',\n\twin32: 'msedge',\n\tlinux: ['microsoft-edge', 'microsoft-edge-dev']\n}, {\n\twsl: '/mnt/c/Program Files (x86)/Microsoft/Edge/Application/msedge.exe'\n}));\n\nopen.apps = apps;\nopen.openApp = openApp;\n\nmodule.exports = open;\n", "", "const vscode = require('vscode');\nconst fs = require('fs');\nconst open = require('open');\nconst bootServer = require('./server');\n\nconst global = {};\nconst cache = {};\n\nglobal.json = {};\nglobal.isIdle = false;\nglobal.minutesInADay = 1440;\nglobal.timeTillIdle = 5 * 60 * 1000;\nglobal.fileDir = \"time-tracker-storage-mimja\";\nglobal.fileName = \"time.mim\";\nglobal.idleTimeout = null;\n\nmodule.exports.extensionGlobals = global;\n\n/**\n * This functions returns an array containing information about the current local time.\n * @returns {[year, month, day, hour, minute, sec, today]}\n */\nglobal.currentTime = () => {\n\tconst today = new Date();\n\tconst yyyy = today.getFullYear();\n\tconst mm = today.getMonth() + 1;\n\tconst dd = today.getDate();\n\tconst hh = today.getHours();\n\tconst min = today.getMinutes();\n\tconst sec = today.getSeconds();\n\treturn [yyyy, mm, dd, hh, min, sec, today];\n}\n\n/**\n * @param {vscode.ExtensionContext} context\n */\nfunction activate(context) {\n\t//Get the current settings\n\tdefineCurrentSettings();\n\tcache.labelPosition = global.labelPosition;\n\tcache.labelPriority = global.labelPriority;\n\tcache.iconString = global.iconString;\n\n\tvscode.workspace.onDidChangeConfiguration(() => {\n\t\tdefineCurrentSettings();\n\t\tunIdle(null);\n\n\t\tif (global.labelPosition !== cache.labelPosition || global.labelPriority !== cache.labelPriority) {\n\t\t\tvscode.window.showInformationMessage('Reload VSCode to see the changes.', 'Reload').then(selection => {\n\t\t\t\tif (selection == 'Reload') {\n\t\t\t\t\tvscode.commands.executeCommand(\"workbench.action.reloadWindow\");\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tif (global.iconString !== cache.iconString) {\n\t\t\tupdateBarItem();\n\t\t}\n\n\t\tcache.labelPosition = global.labelPosition;\n\t\tcache.labelPriority = global.labelPriority;\n\t\tcache.iconString = global.iconString;\n\t})\n\n\t// create the bar icon\n\tglobal.item = vscode.window.createStatusBarItem(global.labelPosition, global.labelPriority);\n\tglobal.item.command = 'mimjas-time-tracker.timeStatuesItemClicked';\n\tcontext.subscriptions.push(global.item);\n\tglobal.item.show();\n\n\t//Listen for click on the time logger item in the status bar\n\tcontext.subscriptions.push(vscode.commands.registerCommand('mimjas-time-tracker.timeStatuesItemClicked', showOnWeb));\n\n\t// Initialize the time counting\n\tinitializeTimeValues();\n\tupdateBarItem();\n\tinitiateCounting();\n\tunIdle(69);\n\n\t// Listen for un-idle events\n\tvscode.workspace.onDidChangeTextDocument(changeEvent => unIdle(changeEvent));\n\tvscode.workspace.onDidCreateFiles(createEvent => unIdle(createEvent));\n\tvscode.workspace.onDidDeleteFiles(deleteEvent => unIdle(deleteEvent));\n\tvscode.workspace.onDidRenameFiles(renameEvent => unIdle(renameEvent));\n\tvscode.window.onDidOpenTerminal(terminal => unIdle(terminal));\n\tvscode.window.onDidCloseTerminal(terminal => unIdle(terminal));\n\tvscode.window.onDidChangeWindowState(state => unIdle(state));\n\n\t//Create any random commands.\n\tconst showCatCommand = 'mimjas-time-tracker.showCat';\n\tconst showGraphCommand = 'mimjas-time-tracker.showOnWeb';\n\n\tcontext.subscriptions.push(vscode.commands.registerCommand(showCatCommand, showCat));\n\tcontext.subscriptions.push(vscode.commands.registerCommand(showGraphCommand, showOnWeb));\n}\n\nfunction showOnWeb() {\n\t// let port = bootServer();\n\t// await open(`http://localhost:${port}`);\n\tvscode.window.showErrorMessage('This feature has been temporarily disabled do to a bug.');\n}\n\nfunction updateBarItem() {\n\tlet seconds = global.json[global.currentTime()[0]][global.currentTime()[1]][global.currentTime()[2]].active;\n\n\tlet hours = `${(seconds / 60) / 60}`.split('.')[0];\n\tlet minutes = `${((seconds / 60) - (hours * 60))}`.split('.')[0];\n\n\tlet h_s = `${hours} hr`;\n\tlet m_s = `${minutes} min`;\n\n\tif (hours <= 0) h_s = '';\n\tif (minutes <= 0) m_s = '';\n\tif (hours > 1) h_s = `${h_s}s`;\n\tif (minutes > 1) m_s = `${m_s}s`;\n\n\tglobal.item.text = `${global.iconString} ${h_s} ${m_s}`;\n\tglobal.item.tooltip = `Time Spent Coding on ${`${global.currentTime()[1]}/${global.currentTime()[2]}/${global.currentTime()[0]}`}`;\n}\n\n/**\n * This function gets the currently saved information and passes it into `global.time`\n */\nfunction initializeTimeValues() {\n\tlet savedTimeJson;\n\n\ttry {\n\t\tsavedTimeJson = fs.readFileSync(`${__dirname}/../../${global.fileDir}/${global.fileName}.json`, 'utf8');\n\t} catch (e) {\n\t\ttry {\n\t\t\tfs.mkdirSync(`${__dirname}/../../${global.fileDir}/`);\n\t\t} catch (e) {};\n\t\tfs.writeFileSync(`${__dirname}/../../${global.fileDir}/${global.fileName}.json`, '{}');\n\t\tsavedTimeJson = fs.readFileSync(`${__dirname}/../../${global.fileDir}/${global.fileName}.json`, 'utf8');\n\t}\n\n\tglobal.json = checkJson(savedTimeJson);\n}\n\n/**\n * This function begins the counting process and begins logging active coding time.\n */\nfunction initiateCounting() {\n\tclearInterval(global.importantInterval);\n\tglobal.importantInterval = setInterval(() => {\n\t\tif (global.isIdle) return;\n\t\tglobal.json = checkJson(global.json);\n\t\tglobal.json[global.currentTime()[0]][global.currentTime()[1]][global.currentTime()[2]].active++;\n\t\tif (global.json[global.currentTime()[0]][global.currentTime()[1]][global.currentTime()[2]].active % 60 == 0) {\n\t\t\tupdateBarItem();\n\t\t\tfs.writeFileSync(`${__dirname}/../../${global.fileDir}/${global.fileName}.json`, JSON.stringify(global.json));\n\t\t}\n\t}, 1000)\n}\n\n/**\n * This function runs a series of checks on the current json and fixes any thing it finds.\n */\nfunction checkJson(json) {\n\tif (typeof json == 'string') json = JSON.parse(json);\n\n\tlet hasChanged = false;\n\tlet checkedJson = json;\n\tlet previous = null;\n\n\tif (json[global.currentTime()[0]] == undefined) {\n\t\tcheckedJson[global.currentTime()[0]] = {};\n\t\thasChanged = true;\n\t}\n\n\tprevious = json[global.currentTime()[0]];\n\n\tif (previous[global.currentTime()[1]] == undefined) {\n\t\tcheckedJson[global.currentTime()[0]][global.currentTime()[1]] = {};\n\t\thasChanged = true;\n\t}\n\n\tprevious = json[global.currentTime()[0]][global.currentTime()[1]];\n\n\tif (previous[global.currentTime()[2]] == undefined) {\n\t\tcheckedJson[global.currentTime()[0]][global.currentTime()[1]][global.currentTime()[2]] = {};\n\t\thasChanged = true;\n\t}\n\n\tprevious = json[global.currentTime()[0]][global.currentTime()[1]][global.currentTime()[2]];\n\n\tif (previous.active == undefined) {\n\t\tcheckedJson[global.currentTime()[0]][global.currentTime()[1]][global.currentTime()[2]].active = 0;\n\t\thasChanged = true;\n\t}\n\n\tif (previous.day == undefined) {\n\t\tlet dayKey = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\n\t\tcheckedJson[global.currentTime()[0]][global.currentTime()[1]][global.currentTime()[2]].day = dayKey[global.currentTime()[6].getDay()];\n\t\thasChanged = true;\n\t}\n\n\tif (hasChanged) {\n\t\tfs.writeFileSync(`${__dirname}/../../${global.fileDir}/${global.fileName}.json`, JSON.stringify(checkedJson), null, 4);\n\t}\n\n\treturn checkedJson;\n}\n\n/**\n * This function updates all the global variables to the current settings.\n */\nfunction defineCurrentSettings() {\n\tglobal.iconString = vscode.workspace.getConfiguration().get('mimjas-time-tracker.iconStyle');\n\tif (global.iconString == '') {\n\t\tglobal.iconString = 'circuit-board';\n\t\tvscode.workspace.getConfiguration().update('mimjas-time-tracker.iconStyle', 'circuit-board', vscode.ConfigurationTarget.Global);\n\t}\n\n\tglobal.iconString = `$(${global.iconString})`;\n\n\tif (vscode.workspace.getConfiguration().get('mimjas-time-tracker.labelPosition') == 'Left') {\n\t\tglobal.labelPosition = vscode.StatusBarAlignment.Left;\n\t} else {\n\t\tglobal.labelPosition = vscode.StatusBarAlignment.Right;\n\t}\n\n\tif (vscode.workspace.getConfiguration().get('mimjas-time-tracker.labelPriority')) {\n\t\tif (global.labelPosition == vscode.StatusBarAlignment.Right) {\n\t\t\tglobal.labelPriority = Infinity;\n\t\t} else {\n\t\t\tglobal.labelPriority = -Infinity;\n\t\t}\n\t} else {\n\t\tif (global.labelPosition == vscode.StatusBarAlignment.Right) {\n\t\t\tglobal.labelPriority = -Infinity;\n\t\t} else {\n\t\t\tglobal.labelPriority = Infinity;\n\t\t}\n\t}\n\n\tglobal.timeTillIdle = vscode.workspace.getConfiguration().get('mimjas-time-tracker.timeTillIdle') * 1000 * 60;\n}\n\n/**\n * This function that handles the idle timer.\n */\nfunction unIdle(event) {\n\tif (global.isIdle) global.isIdle = false;\n\tif (event != null && !event.focused) return;\n\n\tclearTimeout(global.idleTimeout);\n\tglobal.idleTimeout = setTimeout(() => {\n\t\tglobal.isIdle = true;\n\t\tvscode.window.showInformationMessage('Idle mode has been activated. Time will not be logged until you resume coding.');\n\t}, global.timeTillIdle);\n}\n\n/**\n * @param {string} filepath \n * @returns {string} file type\n */\nfunction parse(filepath) {\n\treturn filepath.substring(filepath.lastIndexOf('.') + 1, filepath.length);\n}\n\n/**\n * Displays a Cat Image in new Tab, very important.\n */\nfunction showCat() {\n\tconst panel = vscode.window.createWebviewPanel('catCoding', 'Cat Coding', vscode.ViewColumn.One, {});\n\tpanel.webview.html = `<!DOCTYPE html>\n\t<html lang=\"en\">\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t\t<title>Cat Coding - Image</title>\n\t</head>\n\t<body>\n\t\t<img src=\"https://media.giphy.com/media/JIX9t2j0ZTN9S/giphy.gif\" width=\"650\" />\n\t</body>\n\t</html>`;\n}\n\nfunction deactivate() {\n\tfs.writeFileSync(`${__dirname}/../../${global.fileDir}/${global.fileName}.json`, JSON.stringify(global.json));\n}\n\nmodule.exports = {\n\tactivate,\n\tdeactivate\n}"],
  "mappings": ";;;;;;AAAA;AAAA;AAAA;AACA,QAAM,MAAK,QAAQ;AAEnB,QAAI;AAEJ,4BAAwB;AACvB,UAAI;AACH,YAAG,SAAS;AACZ,eAAO;AAAA,eACC,GAAP;AACD,eAAO;AAAA;AAAA;AAIT,+BAA2B;AAC1B,UAAI;AACH,eAAO,IAAG,aAAa,qBAAqB,QAAQ,SAAS;AAAA,eACrD,GAAP;AACD,eAAO;AAAA;AAAA;AAIT,YAAO,UAAU,MAAM;AACtB,UAAI,aAAa,QAAW;AAC3B,mBAAW,kBAAkB;AAAA;AAG9B,aAAO;AAAA;AAAA;AAAA;;;AC3BR;AAAA;AAAA;AACA,QAAM,KAAK,QAAQ;AACnB,QAAM,MAAK,QAAQ;AACnB,QAAM,WAAW;AAEjB,QAAM,QAAQ,MAAM;AACnB,UAAI,QAAQ,aAAa,SAAS;AACjC,eAAO;AAAA;AAGR,UAAI,GAAG,UAAU,cAAc,SAAS,cAAc;AACrD,YAAI,YAAY;AACf,iBAAO;AAAA;AAGR,eAAO;AAAA;AAGR,UAAI;AACH,eAAO,IAAG,aAAa,iBAAiB,QAAQ,cAAc,SAAS,eACtE,CAAC,aAAa;AAAA,eACP,GAAP;AACD,eAAO;AAAA;AAAA;AAIT,QAAI,QAAQ,IAAI,iBAAiB;AAChC,cAAO,UAAU;AAAA,WACX;AACN,cAAO,UAAU;AAAA;AAAA;AAAA;;;AC7BlB;AAAA;AAAA;AACA,YAAO,UAAU,CAAC,QAAQ,cAAc,OAAO;AAC9C,YAAM,SAAS,WAAS,OAAO,eAAe,QAAQ,cAAc,EAAC,OAAO,YAAY,MAAM,UAAU;AAExG,aAAO,eAAe,QAAQ,cAAc;AAAA,QAC3C,cAAc;AAAA,QACd,YAAY;AAAA,QACZ,MAAM;AACL,gBAAM,SAAS;AACf,iBAAO;AACP,iBAAO;AAAA;AAAA,QAER,IAAI,OAAO;AACV,iBAAO;AAAA;AAAA;AAIT,aAAO;AAAA;AAAA;AAAA;;;ACjBR;AAAA;AAAA,QAAM,OAAO,QAAQ;AACrB,QAAM,eAAe,QAAQ;AAC7B,QAAM,EAAC,UAAU,KAAI,WAAW,gBAAe,QAAQ;AACvD,QAAM,QAAQ;AACd,QAAM,WAAW;AACjB,QAAM,qBAAqB;AAG3B,QAAM,mBAAmB,KAAK,KAAK,WAAW;AAE9C,QAAM,EAAC,UAAU,SAAQ;AAQzB,QAAM,yBAA0B,OAAM;AAGrC,YAAM,oBAAoB;AAE1B,UAAI;AAEJ,aAAO,iBAAkB;AACxB,YAAI,YAAY;AAEf,iBAAO;AAAA;AAGR,cAAM,iBAAiB;AAEvB,YAAI,qBAAqB;AACzB,YAAI;AACH,gBAAM,IAAG,OAAO,gBAAgB,YAAY;AAC5C,+BAAqB;AAAA,gBACpB;AAAA;AAEF,YAAI,CAAC,oBAAoB;AACxB,iBAAO;AAAA;AAGR,cAAM,gBAAgB,MAAM,IAAG,SAAS,gBAAgB,EAAC,UAAU;AACnE,cAAM,mBAAmB,wCAAwC,KAAK;AAEtE,YAAI,CAAC,kBAAkB;AACtB,iBAAO;AAAA;AAGR,qBAAa,iBAAiB,OAAO,WAAW;AAChD,qBAAa,WAAW,SAAS,OAAO,aAAa,GAAG;AAExD,eAAO;AAAA;AAAA;AAIT,QAAM,WAAW,OAAO,OAAO,WAAW;AACzC,UAAI;AAEJ,iBAAW,QAAQ,OAAO;AACzB,YAAI;AACH,iBAAO,MAAM,OAAO;AAAA,iBACZ,OAAP;AACD,wBAAc;AAAA;AAAA;AAIhB,YAAM;AAAA;AAGP,QAAM,WAAW,OAAM,YAAW;AACjC,gBAAU;AAAA,QACT,MAAM;AAAA,QACN,YAAY;AAAA,QACZ,aAAa;AAAA,QACb,sBAAsB;AAAA,WACnB;AAAA;AAGJ,UAAI,MAAM,QAAQ,QAAQ,MAAM;AAC/B,eAAO,SAAS,QAAQ,KAAK,eAAa,SAAS;AAAA,aAC/C;AAAA,UACH,KAAK;AAAA;AAAA;AAIP,UAAI,EAAC,MAAM,KAAK,WAAW,eAAe,OAAM,QAAQ,OAAO;AAC/D,qBAAe,CAAC,GAAG;AAEnB,UAAI,MAAM,QAAQ,MAAM;AACvB,eAAO,SAAS,KAAK,aAAW,SAAS;AAAA,aACrC;AAAA,UACH,KAAK;AAAA,YACJ,MAAM;AAAA,YACN,WAAW;AAAA;AAAA;AAAA;AAKd,UAAI;AACJ,YAAM,eAAe;AACrB,YAAM,sBAAsB;AAE5B,UAAI,aAAa,UAAU;AAC1B,kBAAU;AAEV,YAAI,QAAQ,MAAM;AACjB,uBAAa,KAAK;AAAA;AAGnB,YAAI,QAAQ,YAAY;AACvB,uBAAa,KAAK;AAAA;AAGnB,YAAI,QAAQ,aAAa;AACxB,uBAAa,KAAK;AAAA;AAGnB,YAAI,KAAK;AACR,uBAAa,KAAK,MAAM;AAAA;AAAA,iBAEf,aAAa,WAAY,SAAS,CAAC,YAAa;AAC1D,cAAM,aAAa,MAAM;AAEzB,kBAAU,QACT,GAAG,uEACH,GAAG,QAAQ,IAAI;AAEhB,qBAAa,KACZ,cACA,mBACA,yBACA,UACA;AAGD,YAAI,CAAC,OAAO;AACX,8BAAoB,2BAA2B;AAAA;AAGhD,cAAM,mBAAmB,CAAC;AAE1B,YAAI,QAAQ,MAAM;AACjB,2BAAiB,KAAK;AAAA;AAGvB,YAAI,KAAK;AAGR,2BAAiB,KAAK,OAAO,WAAW;AACxC,cAAI,QAAQ,QAAQ;AACnB,yBAAa,QAAQ,QAAQ;AAAA;AAAA,mBAEpB,QAAQ,QAAQ;AAC1B,2BAAiB,KAAK,IAAI,QAAQ;AAAA;AAGnC,YAAI,aAAa,SAAS,GAAG;AAC5B,yBAAe,aAAa,IAAI,SAAO,OAAO;AAC9C,2BAAiB,KAAK,aAAa,KAAK;AAAA;AAIzC,gBAAQ,SAAS,OAAO,KAAK,iBAAiB,KAAK,MAAM,WAAW,SAAS;AAAA,aACvE;AACN,YAAI,KAAK;AACR,oBAAU;AAAA,eACJ;AAEN,gBAAM,YAAY,CAAC,aAAa,cAAc;AAG9C,cAAI,kBAAkB;AACtB,cAAI;AACH,kBAAM,IAAG,OAAO,kBAAkB,YAAY;AAC9C,8BAAkB;AAAA,kBACjB;AAAA;AAEF,gBAAM,mBAAmB,QAAQ,SAAS,YACzC,aAAa,aAAa,aAAa,CAAC;AACzC,oBAAU,mBAAmB,aAAa;AAAA;AAG3C,YAAI,aAAa,SAAS,GAAG;AAC5B,uBAAa,KAAK,GAAG;AAAA;AAGtB,YAAI,CAAC,QAAQ,MAAM;AAGlB,8BAAoB,QAAQ;AAC5B,8BAAoB,WAAW;AAAA;AAAA;AAIjC,UAAI,QAAQ,QAAQ;AACnB,qBAAa,KAAK,QAAQ;AAAA;AAG3B,UAAI,aAAa,YAAY,aAAa,SAAS,GAAG;AACrD,qBAAa,KAAK,UAAU,GAAG;AAAA;AAGhC,YAAM,aAAa,aAAa,MAAM,SAAS,cAAc;AAE7D,UAAI,QAAQ,MAAM;AACjB,eAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACvC,qBAAW,KAAK,SAAS;AAEzB,qBAAW,KAAK,SAAS,cAAY;AACpC,gBAAI,QAAQ,wBAAwB,WAAW,GAAG;AACjD,qBAAO,IAAI,MAAM,oBAAoB;AACrC;AAAA;AAGD,oBAAQ;AAAA;AAAA;AAAA;AAKX,iBAAW;AAEX,aAAO;AAAA;AAGR,QAAM,QAAO,CAAC,QAAQ,YAAY;AACjC,UAAI,OAAO,WAAW,UAAU;AAC/B,cAAM,IAAI,UAAU;AAAA;AAGrB,aAAO,SAAS;AAAA,WACZ;AAAA,QACH;AAAA;AAAA;AAIF,QAAM,UAAU,CAAC,MAAM,YAAY;AAClC,UAAI,OAAO,SAAS,UAAU;AAC7B,cAAM,IAAI,UAAU;AAAA;AAGrB,YAAM,EAAC,WAAW,eAAe,OAAM,WAAW;AAClD,UAAI,iBAAiB,UAAa,iBAAiB,QAAQ,CAAC,MAAM,QAAQ,eAAe;AACxF,cAAM,IAAI,UAAU;AAAA;AAGrB,aAAO,SAAS;AAAA,WACZ;AAAA,QACH,KAAK;AAAA,UACJ;AAAA,UACA,WAAW;AAAA;AAAA;AAAA;AAKd,8BAA0B,QAAQ;AACjC,UAAI,OAAO,WAAW,YAAY,MAAM,QAAQ,SAAS;AACxD,eAAO;AAAA;AAGR,YAAM,GAAE,OAAO,eAAc;AAE7B,UAAI,CAAC,YAAY;AAChB,cAAM,IAAI,MAAM,GAAG;AAAA;AAGpB,aAAO;AAAA;AAGR,kCAA8B,GAAE,WAAW,kBAAiB,EAAC,OAAM;AAClE,UAAI,OAAO,OAAO;AACjB,eAAO,iBAAiB;AAAA;AAGzB,UAAI,CAAC,gBAAgB;AACpB,cAAM,IAAI,MAAM,GAAG;AAAA;AAGpB,aAAO,iBAAiB;AAAA;AAGzB,QAAM,OAAO;AAEb,uBAAmB,MAAM,UAAU,MAAM,qBAAqB;AAAA,MAC7D,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,OAAO,CAAC,iBAAiB,wBAAwB;AAAA,OAC/C;AAAA,MACF,KAAK;AAAA,QACJ,MAAM;AAAA,QACN,KAAK,CAAC,6DAA6D;AAAA;AAAA;AAIrE,uBAAmB,MAAM,WAAW,MAAM,qBAAqB;AAAA,MAC9D,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,OAAO;AAAA,OACL;AAAA,MACF,KAAK;AAAA;AAGN,uBAAmB,MAAM,QAAQ,MAAM,qBAAqB;AAAA,MAC3D,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,OAAO,CAAC,kBAAkB;AAAA,OACxB;AAAA,MACF,KAAK;AAAA;AAGN,UAAK,OAAO;AACZ,UAAK,UAAU;AAEf,YAAO,UAAU;AAAA;AAAA;;;AC1TjB;AAAA;AAAA;AAAA;;;ACAA,IAAM,SAAS,QAAQ;AACvB,IAAM,KAAK,QAAQ;AACnB,IAAM,OAAO;AACb,IAAM,aAAa;AAEnB,IAAM,SAAS;AACf,IAAM,QAAQ;AAEd,OAAO,OAAO;AACd,OAAO,SAAS;AAChB,OAAO,gBAAgB;AACvB,OAAO,eAAe,IAAI,KAAK;AAC/B,OAAO,UAAU;AACjB,OAAO,WAAW;AAClB,OAAO,cAAc;AAErB,OAAO,QAAQ,mBAAmB;AAMlC,OAAO,cAAc,MAAM;AAC1B,QAAM,QAAQ,IAAI;AAClB,QAAM,OAAO,MAAM;AACnB,QAAM,KAAK,MAAM,aAAa;AAC9B,QAAM,KAAK,MAAM;AACjB,QAAM,KAAK,MAAM;AACjB,QAAM,MAAM,MAAM;AAClB,QAAM,MAAM,MAAM;AAClB,SAAO,CAAC,MAAM,IAAI,IAAI,IAAI,KAAK,KAAK;AAAA;AAMrC,kBAAkB,SAAS;AAE1B;AACA,QAAM,gBAAgB,OAAO;AAC7B,QAAM,gBAAgB,OAAO;AAC7B,QAAM,aAAa,OAAO;AAE1B,SAAO,UAAU,yBAAyB,MAAM;AAC/C;AACA,WAAO;AAEP,QAAI,OAAO,kBAAkB,MAAM,iBAAiB,OAAO,kBAAkB,MAAM,eAAe;AACjG,aAAO,OAAO,uBAAuB,qCAAqC,UAAU,KAAK,eAAa;AACrG,YAAI,aAAa,UAAU;AAC1B,iBAAO,SAAS,eAAe;AAAA;AAAA;AAAA;AAKlC,QAAI,OAAO,eAAe,MAAM,YAAY;AAC3C;AAAA;AAGD,UAAM,gBAAgB,OAAO;AAC7B,UAAM,gBAAgB,OAAO;AAC7B,UAAM,aAAa,OAAO;AAAA;AAI3B,SAAO,OAAO,OAAO,OAAO,oBAAoB,OAAO,eAAe,OAAO;AAC7E,SAAO,KAAK,UAAU;AACtB,UAAQ,cAAc,KAAK,OAAO;AAClC,SAAO,KAAK;AAGZ,UAAQ,cAAc,KAAK,OAAO,SAAS,gBAAgB,8CAA8C;AAGzG;AACA;AACA;AACA,SAAO;AAGP,SAAO,UAAU,wBAAwB,iBAAe,OAAO;AAC/D,SAAO,UAAU,iBAAiB,iBAAe,OAAO;AACxD,SAAO,UAAU,iBAAiB,iBAAe,OAAO;AACxD,SAAO,UAAU,iBAAiB,iBAAe,OAAO;AACxD,SAAO,OAAO,kBAAkB,cAAY,OAAO;AACnD,SAAO,OAAO,mBAAmB,cAAY,OAAO;AACpD,SAAO,OAAO,uBAAuB,WAAS,OAAO;AAGrD,QAAM,iBAAiB;AACvB,QAAM,mBAAmB;AAEzB,UAAQ,cAAc,KAAK,OAAO,SAAS,gBAAgB,gBAAgB;AAC3E,UAAQ,cAAc,KAAK,OAAO,SAAS,gBAAgB,kBAAkB;AAAA;AAG9E,qBAAqB;AAGpB,SAAO,OAAO,iBAAiB;AAAA;AAGhC,yBAAyB;AACxB,MAAI,UAAU,OAAO,KAAK,OAAO,cAAc,IAAI,OAAO,cAAc,IAAI,OAAO,cAAc,IAAI;AAErG,MAAI,QAAQ,GAAI,UAAU,KAAM,KAAK,MAAM,KAAK;AAChD,MAAI,UAAU,GAAK,UAAU,KAAO,QAAQ,KAAO,MAAM,KAAK;AAE9D,MAAI,MAAM,GAAG;AACb,MAAI,MAAM,GAAG;AAEb,MAAI,SAAS;AAAG,UAAM;AACtB,MAAI,WAAW;AAAG,UAAM;AACxB,MAAI,QAAQ;AAAG,UAAM,GAAG;AACxB,MAAI,UAAU;AAAG,UAAM,GAAG;AAE1B,SAAO,KAAK,OAAO,GAAG,OAAO,cAAc,OAAO;AAClD,SAAO,KAAK,UAAU,wBAAwB,GAAG,OAAO,cAAc,MAAM,OAAO,cAAc,MAAM,OAAO,cAAc;AAAA;AAM7H,gCAAgC;AAC/B,MAAI;AAEJ,MAAI;AACH,oBAAgB,GAAG,aAAa,GAAG,mBAAmB,OAAO,WAAW,OAAO,iBAAiB;AAAA,WACxF,GAAP;AACD,QAAI;AACH,SAAG,UAAU,GAAG,mBAAmB,OAAO;AAAA,aAClC,IAAP;AAAA;AAAY;AACd,OAAG,cAAc,GAAG,mBAAmB,OAAO,WAAW,OAAO,iBAAiB;AACjF,oBAAgB,GAAG,aAAa,GAAG,mBAAmB,OAAO,WAAW,OAAO,iBAAiB;AAAA;AAGjG,SAAO,OAAO,UAAU;AAAA;AAMzB,4BAA4B;AAC3B,gBAAc,OAAO;AACrB,SAAO,oBAAoB,YAAY,MAAM;AAC5C,QAAI,OAAO;AAAQ;AACnB,WAAO,OAAO,UAAU,OAAO;AAC/B,WAAO,KAAK,OAAO,cAAc,IAAI,OAAO,cAAc,IAAI,OAAO,cAAc,IAAI;AACvF,QAAI,OAAO,KAAK,OAAO,cAAc,IAAI,OAAO,cAAc,IAAI,OAAO,cAAc,IAAI,SAAS,MAAM,GAAG;AAC5G;AACA,SAAG,cAAc,GAAG,mBAAmB,OAAO,WAAW,OAAO,iBAAiB,KAAK,UAAU,OAAO;AAAA;AAAA,KAEtG;AAAA;AAMJ,mBAAmB,MAAM;AACxB,MAAI,OAAO,QAAQ;AAAU,WAAO,KAAK,MAAM;AAE/C,MAAI,aAAa;AACjB,MAAI,cAAc;AAClB,MAAI,WAAW;AAEf,MAAI,KAAK,OAAO,cAAc,OAAO,QAAW;AAC/C,gBAAY,OAAO,cAAc,MAAM;AACvC,iBAAa;AAAA;AAGd,aAAW,KAAK,OAAO,cAAc;AAErC,MAAI,SAAS,OAAO,cAAc,OAAO,QAAW;AACnD,gBAAY,OAAO,cAAc,IAAI,OAAO,cAAc,MAAM;AAChE,iBAAa;AAAA;AAGd,aAAW,KAAK,OAAO,cAAc,IAAI,OAAO,cAAc;AAE9D,MAAI,SAAS,OAAO,cAAc,OAAO,QAAW;AACnD,gBAAY,OAAO,cAAc,IAAI,OAAO,cAAc,IAAI,OAAO,cAAc,MAAM;AACzF,iBAAa;AAAA;AAGd,aAAW,KAAK,OAAO,cAAc,IAAI,OAAO,cAAc,IAAI,OAAO,cAAc;AAEvF,MAAI,SAAS,UAAU,QAAW;AACjC,gBAAY,OAAO,cAAc,IAAI,OAAO,cAAc,IAAI,OAAO,cAAc,IAAI,SAAS;AAChG,iBAAa;AAAA;AAGd,MAAI,SAAS,OAAO,QAAW;AAC9B,QAAI,SAAS,CAAC,UAAU,UAAU,WAAW,aAAa,YAAY,UAAU;AAChF,gBAAY,OAAO,cAAc,IAAI,OAAO,cAAc,IAAI,OAAO,cAAc,IAAI,MAAM,OAAO,OAAO,cAAc,GAAG;AAC5H,iBAAa;AAAA;AAGd,MAAI,YAAY;AACf,OAAG,cAAc,GAAG,mBAAmB,OAAO,WAAW,OAAO,iBAAiB,KAAK,UAAU,cAAc,MAAM;AAAA;AAGrH,SAAO;AAAA;AAMR,iCAAiC;AAChC,SAAO,aAAa,OAAO,UAAU,mBAAmB,IAAI;AAC5D,MAAI,OAAO,cAAc,IAAI;AAC5B,WAAO,aAAa;AACpB,WAAO,UAAU,mBAAmB,OAAO,iCAAiC,iBAAiB,OAAO,oBAAoB;AAAA;AAGzH,SAAO,aAAa,KAAK,OAAO;AAEhC,MAAI,OAAO,UAAU,mBAAmB,IAAI,wCAAwC,QAAQ;AAC3F,WAAO,gBAAgB,OAAO,mBAAmB;AAAA,SAC3C;AACN,WAAO,gBAAgB,OAAO,mBAAmB;AAAA;AAGlD,MAAI,OAAO,UAAU,mBAAmB,IAAI,sCAAsC;AACjF,QAAI,OAAO,iBAAiB,OAAO,mBAAmB,OAAO;AAC5D,aAAO,gBAAgB;AAAA,WACjB;AACN,aAAO,gBAAgB;AAAA;AAAA,SAElB;AACN,QAAI,OAAO,iBAAiB,OAAO,mBAAmB,OAAO;AAC5D,aAAO,gBAAgB;AAAA,WACjB;AACN,aAAO,gBAAgB;AAAA;AAAA;AAIzB,SAAO,eAAe,OAAO,UAAU,mBAAmB,IAAI,sCAAsC,MAAO;AAAA;AAM5G,gBAAgB,OAAO;AACtB,MAAI,OAAO;AAAQ,WAAO,SAAS;AACnC,MAAI,SAAS,QAAQ,CAAC,MAAM;AAAS;AAErC,eAAa,OAAO;AACpB,SAAO,cAAc,WAAW,MAAM;AACrC,WAAO,SAAS;AAChB,WAAO,OAAO,uBAAuB;AAAA,KACnC,OAAO;AAAA;AAcX,mBAAmB;AAClB,QAAM,QAAQ,OAAO,OAAO,mBAAmB,aAAa,cAAc,OAAO,WAAW,KAAK;AACjG,QAAM,QAAQ,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAatB,sBAAsB;AACrB,KAAG,cAAc,GAAG,mBAAmB,OAAO,WAAW,OAAO,iBAAiB,KAAK,UAAU,OAAO;AAAA;AAGxG,OAAO,UAAU;AAAA,EAChB;AAAA,EACA;AAAA;",
  "names": []
}
